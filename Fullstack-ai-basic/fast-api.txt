# main.py
from fastapi import FastAPI, HTTPException, Path, Query, Body
from pydantic import BaseModel
from typing import Optional, List, Dict
from fastapi.middleware.cors import CORSMiddleware

# 🚀 Initialize FastAPI app
app = FastAPI(
    title="Learning FastAPI",
    description="Exploring all important FastAPI features",
    version="1.0"
)

# 🌐 CORS Middleware (Allows frontend like Streamlit to call this API)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Use specific domains in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 📦 Pydantic Model for input/output validation
class Item(BaseModel):
    name: str
    price: float
    brand: Optional[str] = None
    tags: Optional[List[str]] = []

# 📦 Update model
class ItemUpdate(BaseModel):
    name: Optional[str]
    price: Optional[float]
    brand: Optional[str]
    tags: Optional[List[str]]

# 🗃️ Sample in-memory database
inventory: Dict[int, Item] = {}

# ----------------------------------
# ✅ CRUD Operations (GET, POST, PUT, DELETE)
# ----------------------------------

# 👁️ GET: View a single item
@app.get("/items/{item_id}")
def get_item(item_id: int = Path(..., gt=0)):
    if item_id not in inventory:
        raise HTTPException(status_code=404, detail="Item not found")
    return inventory[item_id]

# 📜 GET: All items (with optional query filter)
@app.get("/items")
def list_items(brand: Optional[str] = Query(None)):
    if brand:
        return {k: v for k, v in inventory.items() if v.brand == brand}
    return inventory

# 🆕 POST: Add a new item
@app.post("/items/{item_id}")
def add_item(item_id: int, item: Item):
    if item_id in inventory:
        raise HTTPException(status_code=400, detail="Item already exists")
    inventory[item_id] = item
    return {"msg": "Item added successfully", "item": item}

# 🔁 PUT: Update item partially
@app.put("/items/{item_id}")
def update_item(item_id: int, item: ItemUpdate):
    if item_id not in inventory:
        raise HTTPException(status_code=404, detail="Item not found")
    stored_item = inventory[item_id]
    updated_data = item.dict(exclude_unset=True)
    updated_item = stored_item.copy(update=updated_data)
    inventory[item_id] = updated_item
    return updated_item

# ❌ DELETE: Remove item
@app.delete("/items/{item_id}")
def delete_item(item_id: int):
    if item_id not in inventory:
        raise HTTPException(status_code=404, detail="Item not found")
    del inventory[item_id]
    return {"msg": f"Item {item_id} deleted"}

# 🔎 Custom route with POST body
@app.post("/search/")
def search_items(keyword: str = Body(...)):
    result = {k: v for k, v in inventory.items() if keyword.lower() in v.name.lower()}
    return result





▶️ To run FastAPI:
-------------------
uvicorn main:app --reload


